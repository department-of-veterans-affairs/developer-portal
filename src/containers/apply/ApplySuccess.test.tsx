import { render, screen } from '@testing-library/react';
import React from 'react';
import { Provider } from 'react-redux';
import { MemoryRouter } from 'react-router';
import { createStore, combineReducers, compose, applyMiddleware, Store } from 'redux';
import thunk, { ThunkMiddleware } from 'redux-thunk';
import { application, initialApplicationState } from '../../reducers';
import { apiVersioning } from '../../reducers/apiVersioning';
import { oAuthApiSelection } from '../../reducers/oAuthApiSelection';
import defaultStore from '../../store';
import { RootState, ApplySuccessResult } from '../../types';

import { ApplySuccess } from './ApplySuccess';

let store: Store;

const createStoreWithResult = (result: ApplySuccessResult): Store =>
  createStore(
    combineReducers<RootState>({
      apiVersioning,
      application,
      oAuthApiSelection,
    }),
    {
      application: {
        ...initialApplicationState,
        result,
      },
    },
    compose(applyMiddleware(thunk as ThunkMiddleware<RootState>)),
  );

describe('ApplySuccess with results', () => {
  describe('with results', () => {
    describe('all apis', () => {
      beforeEach(() => {
        store = createStoreWithResult({
          apis: {
            appeals: true,
            benefits: true,
            claims: true,
            communityCare: true,
            confirmation: true,
            facilities: true,
            health: true,
            vaForms: true,
            verification: true,
          },
          clientID: 'gimli',
          clientSecret: 'sonofgloin',
          email: 'gimli@eredluin.com',
          token: 'elffriend',
        });

        render(
          <Provider store={store}>
            <MemoryRouter>
              <ApplySuccess />
            </MemoryRouter>
          </Provider>,
        );
      });

      it('renders successfully', () => {
        expect(screen.getByText('Thank you for signing up!')).toBeInTheDocument();
      });
    });

    describe('standard apis', () => {
      beforeEach(() => {
        store = createStoreWithResult({
          apis: {
            appeals: true,
            benefits: true,
            claims: false,
            communityCare: false,
            confirmation: true,
            facilities: true,
            health: false,
            vaForms: true,
            verification: false,
          },
          clientID: 'gimli',
          clientSecret: 'sonofgloin',
          email: 'gimli@eredluin.com',
          token: 'elf-friend',
        });

        render(
          <Provider store={store}>
            <MemoryRouter>
              <ApplySuccess />
            </MemoryRouter>
          </Provider>,
        );
      });

      it('displays the API Key generated by the backend', () => {
        expect(screen.getByText('Your VA API key is:')).toBeInTheDocument();
        expect(screen.getByText('elf-friend')).toBeInTheDocument();
      });

      it('displays the provided email address', () => {
        expect(
          screen.getByText(/You should receive an email at gimli@eredluin\.com/m),
        ).toBeInTheDocument();
      });

      it('displays confirmation for only standard APIs', () => {
        expect(
          screen.getByText(
            /Benefits Intake API, VA Facilities API, VA Form API, and Veteran Confirmation API/,
          ),
        ).toBeInTheDocument();

        expect(
          screen.queryByText(
            /Benefits Claims API, Community Care API, VA Health API, and Veteran Verification API/,
          ),
        ).not.toBeInTheDocument();
      });
    });

    describe('oauth apis', () => {
      beforeEach(() => {
        store = createStoreWithResult({
          apis: {
            appeals: false,
            benefits: false,
            claims: true,
            communityCare: true,
            confirmation: false,
            facilities: false,
            health: true,
            vaForms: false,
            verification: true,
          },
          clientID: 'gimli',
          clientSecret: 'sonofgloin',
          email: 'gimli@eredluin.com',
          token: 'elf-friend',
        });

        render(
          <Provider store={store}>
            <MemoryRouter>
              <ApplySuccess />
            </MemoryRouter>
          </Provider>,
        );
      });

      it('displays the API OAuth Client Id generated by the backend', () => {
        expect(screen.getByText('Your VA API OAuth Client ID:')).toBeInTheDocument();
        expect(screen.getByText('gimli')).toBeInTheDocument();
      });

      it('displays the API OAuth Client Secret generated by the backend', () => {
        expect(screen.getByText('Your VA API OAuth Client Secret:')).toBeInTheDocument();
        expect(screen.getByText('sonofgloin')).toBeInTheDocument();
      });

      it('displays the provided email address', () => {
        expect(
          screen.getByText(/You should receive an email at gimli@eredluin\.com/gm),
        ).toBeInTheDocument();
      });

      it('displays confirmation for only oauth APIs', () => {
        expect(
          screen.queryByText(
            /Benefits Intake API, VA Facilities API, VA Form API, and Veteran Confirmation API/,
          ),
        ).not.toBeInTheDocument();

        expect(
          screen.getByText(
            /Benefits Claims API, Community Care API, VA Health API, and Veteran Verification API/,
          ),
        ).toBeInTheDocument();
      });

      it('contains a link to oauth documentation', () => {
        const oauthDocumentationLink = screen.getByRole('link', { name: 'OAuth Documentation' });

        expect(oauthDocumentationLink).toBeInTheDocument();
        expect(oauthDocumentationLink.getAttribute('href')).toBe('/oauth');
      });
    });
  });

  describe('without results', () => {
    it('renders only an error', () => {
      const { getByText } = render(
        <Provider store={defaultStore}>
          <ApplySuccess />
        </Provider>,
      );

      expect(getByText('Error! Unable to render apply success')).toBeInTheDocument();
    });
  });
});
