name: Unprivileged Visual Regressions
# Unprivileged relates to this job being able to be run by a user without write permissions.
# A PR from a forked repo can safely run this job as there are no repository secrets available to it.
on:
  pull_request:
    branches: [master, node-18-upgrade]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  install:
    runs-on: ubuntu-latest
    outputs:
      hash: ${{ steps.githash.outputs.hash }}
      pr_number: ${{ steps.pr_number.outputs.pr }}
      node_version: ${{ steps.node_version.outputs.node_version }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - id: node_version
        name: Set Node Version to ENV
        run: |
          NODE_VERSION=$(node -v)
          echo $NODE_VERSION
          echo "::set-output name=node_version::$NODE_VERSION"

      - id: pr_number
        name: Get PR Number
        run: |
          PR_NUMBER=`printf $GITHUB_REF | sed 's|refs/pull/||' | sed 's|/merge||'`
          echo $PR_NUMBER
          echo "::set-output name=pr::$PR_NUMBER"

      - id: githash
        name: Set git hash
        run: |
          GIT_HASH=$(/bin/bash -c "git log --oneline | cut -f3 -d \" \" | cut -c1-7")
          echo $GIT_HASH
          echo "::set-output name=hash::$GIT_HASH"

      # - id: cache_node_modules
      #   name: Cache node modules
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: developer-portal-node-modules
      #     node-version: ${{ steps.node_version.outputs.node_version }}
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-${{ env.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        # if: steps.cache_node_modules.outputs.cache-hit != 'true'
        run: npm ci --legacy-peer-deps

  visual:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 18

      # - id: cache_node_modules
      #   name: Cache node modules
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: developer-portal-node-modules
      #     node-version: ${{ needs.install.outputs.node_version }}
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-${{ env.node-version }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Checkout LFS objects
        run: git lfs checkout
      - name: Update apt-get and install packages
        run: sudo apt-get update && sudo apt-get install -y libxss1 libxtst6 wget --no-install-recommends
      - name: Install Google apt-get key
        run: wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
      - name: Install Google apt-get source
        run: sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
      - name: Install Chrome and fonts
        run: sudo apt-get update && sudo apt-get install -y google-chrome-unstable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf --no-install-recommends
      - name: Remove unnecessary files
        run: sudo rm -rf /var/lib/apt/lists/* \
          && sudo apt-get purge --auto-remove -y curl
          && sudo rm -rf /src/*.deb

      - name: Install Cypress and Dependencies
        # if: steps.cache_cypress_binary.outputs.cache-hit != 'true'
        # steps.cache_node_modules.outputs.cache-hit != 'true'
        uses: cypress-io/github-action@v5
        with:
          install-command: npm ci --legacy-peer-deps
          runTests: false

      - id: visual_test
        continue-on-error: true
        name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          config: ignoreTestFiles=null
          env: failOnSnapshotDiff=false
          install: false
          spec: cypress/integration/visual.spec.js
          start: npm start
          wait-on: http://127.0.0.1:3001
          wait-on-timeout: 300

      - name: Add PR and hash to artifact
        if: steps.visual_test.outcome == 'failure'
        env:
          COMMIT_HASH: ${{needs.install.outputs.hash}}
          PR_NUMBER: ${{needs.install.outputs.pr_number}}
        run: |
          mkdir -p test/image_snapshots/visual.spec.js/__diff_output__;
          echo $PR_NUMBER > test/image_snapshots/visual.spec.js/__diff_output__/pr.txt
          echo $COMMIT_HASH > test/image_snapshots/visual.spec.js/__diff_output__/hash.txt
          echo $GITHUB_HEAD_REF > test/image_snapshots/visual.spec.js/__diff_output__/branch.txt

      - name: Add overview failure graphics to archive
        if: steps.visual_test.outcome == 'failure'
        run: |
          cp cypress/screenshots/visual.spec.js/* test/image_snapshots/visual.spec.js/__diff_output__/

      - name: Upload failed screenshots
        if: steps.visual_test.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: visual-test-failures
          path: test/image_snapshots/visual.spec.js/__diff_output__

      - name: Report Success/Failure
        if: steps.visual_test.outcome == 'failure'
        run: exit 1
        # This is needed as a unique step due to the continue-on-error set above in visual_test.
        # Images get uploaded to the s3 bucket from within visual-regressions-privileged.yml
