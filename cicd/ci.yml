version: 0.2
env:
  variables:
    GITHUB_USERNAME: "me"
    # These are the test make targets. 
    #TESTS: "lint security e2e visual accesbility unit"
    # These are the build environments
    ENVS: "dev staging production"
    # Bucket for archiving deployments
    S3_ARCHIVE_BUCKET: "liberty-codebuild-artifacts"
    # Bucket for uploading visual regression failures.
    S3_VISUAL_BUCKET: "liberty-codebuild-artifacts"
    # Bucket for uploading build failure artifacts
    S3_ERRORS_BUCKET: "liberty-codebuild-artifacts"
    # Bucket for uploading PR deploy previews.
    S3_REVIEW_BUCKET: "liberty-review-bucket"
    ## move to paramstore
    REACT_APP_SENTRY_DSN: "https://dc7d5ebec20e474c80f8150c399d2955@dev-developer.va.gov/sentry/26"
  parameter-store:
    GITHUB_TOKEN: "/github_token"
    SLACK_WEBHOOK: "/slack_web_hook"
phases:
  install:
    commands:
      # There is considerable slow down in the provisioning phase when using Amazon provided images.
      # Therefore we use our own Alpine based image. In order to activate the Docker Daemon these lines are needed.
      - /usr/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
    commands:
      # set variables
      # If you replay a job in the console the Branch will not be set.
      - if [[ $CODEBUILD_WEBHOOK_EVENT == "PULL_REQUEST_CREATED"  ]]; then TESTS=""; fi
      - BRANCH=$(echo ${CODEBUILD_WEBHOOK_HEAD_REF} | awk -F'/' '{print $3}')
      - REPO=$(echo ${CODEBUILD_SOURCE_REPO_URL} | sed -e 's#^https://github.com/##')
      - COMMIT_HASH=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - git lfs pull
      - mkdir -p reports
      - PR_NUM=$(prnum.sh ${REPO} ${BRANCH:-default})
      - |
        if [[ ${PR_NUM} ]]; then
          for env in ${ENVS}; do
        cat <<EOF > .env.${env}.local
        PUBLIC_URL=/${S3_REVIEW_BUCKET}/${BRANCH}/${COMMIT_HASH}/${env}
        REACT_APP_SENTRY_DSN=${REACT_APP_SENTRY_DSN}
        EOF
          done
        fi
  build:
    commands:
      - phase=image_scan
      - ./prohibit_image_files.sh origin/master HEAD
